apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'java-library'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'org.sonarqube'

// # Uncomment lines below to force dependency downloading (e.g. when explorviz-discovery-common)
//configurations.all {
//  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
//}

def loadProperties = {
    def properties = new Properties()
    file('src/main/webapp/WEB-INF/classes/explorviz.properties').withInputStream {
        properties.load(it)
    }
    return properties
}

buildscript {
  repositories {
  	jcenter()
    maven {
    	url 'https://plugins.gradle.org/m2/'
    	url 'https://jitpack.io'
    }
  }

    dependencies {
      	classpath 'org.akhikhl.gretty:gretty:+'
		classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.1'
    }
}

repositories {
  jcenter()
  maven {url 'https://oss.sonatype.org/content/repositories/snapshots'}
  maven {url 'https://jitpack.io'}
}

dependencies {
  // Any .jar in libs
  compile fileTree(dir: 'libs', include: '*.jar')
  
  // explorviz-kieker-adapter
  compile project(':explorviz-backend-kiekeradapter')
    
  // Jersey and Servlet
  compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet', version:'2.26'
  compile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.0.1'
  compile group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version:'2.26'
  
  // ExplorViz Discovery Classes
  compile 'com.github.ExplorViz:explorviz-discovery-common:master-SNAPSHOT'
    
  // Database, ORM and Serialization
  compile group: 'com.h2database', name: 'h2', version:'1.4.196'
  compile group: 'de.ruedigermoeller', name: 'fst', version:'2.47'
  compile group: 'org.hibernate', name: 'hibernate-core', version:'5.2.11.Final'
  compile group: 'org.hibernate', name: 'hibernate-c3p0', version:'5.2.11.Final'
  
  // JSON + Parsing
  compile group: 'com.github.jasminb', name: 'jsonapi-converter', version:'0.8'
  compile group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version:'2.23'
  compile group: 'org.glassfish.jersey.media', name:'jersey-media-multipart', version:'2.26'
  compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version:'2.7.1'
  compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'2.7.1'
  compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version:'2.7.1'
   
  testImplementation 'junit:junit:4.12'
}

// ##### BEGIN Jitpack section #####

// War plugin typically disables jar build
assemble.dependsOn jar

// https://discuss.gradle.org/t/deploying-multiple-artifacts-war-jar-sources-to-artifactory/4239
artifacts {
  	archives file: file('libs/explorviz-common-1.0.jar'), name: 'explorviz-common', type: 'jar'
  	archives file: file('libs/explorviz-worker-1.0.jar'), name: 'explorviz-worker', type: 'jar'
  	archives jar
  	archives war {
        classifier = 'deployment'
    }
}

jar {
  baseName = project.name 
}

install {
  repositories {
    mavenInstaller {
      addFilter('explorviz-common') {artifact, file ->
        artifact.name == 'explorviz-common'
      }
      addFilter('explorviz-worker') {artifact, file ->
        artifact.name == 'explorviz-worker'
      }
      addFilter('explorviz-backend') {artifact, file ->
        artifact.name == 'explorviz-backend'
      }
    }
  }
}

// ##### END Jitpack section #####

// QS Tooling
// will pass until fixing is done
pmd {	
	// Clear the rule set first. Otherwise we would have a lot of additional rules in our rule set.
	ruleSets = []
	ruleSetFiles = files("conf/pmd.xml")
	consoleOutput = false
	ignoreFailures = true
}
    
checkstyle {
	showViolations = false
	configFile = file("conf/checkstyle.xml")
	ignoreFailures = true
}

findbugs {
	reportLevel = "low"
	effort = "max"
	excludeFilter = file("conf/findbugs-exclude.xml")
	ignoreFailures = true
}

tasks.withType(Pmd) {
	reports {
    	xml.enabled = false
        html.enabled = true
    }
}

tasks.withType(FindBugs) {
	reports {
    	xml.enabled = false
        html.enabled = true
    }
}

tasks.withType(Checkstyle) {
  	reports {
    	xml.enabled = false
        html.enabled = true
  }
}

// Javadoc settings
javadoc {
	source = sourceSets.main.allJava
	  destinationDir = file("./docs/")
	  failOnError false
}

// Embedded Webserver
gretty {
	httpPort = loadProperties().httpPort.toInteger()
	servletContainer = loadProperties().servletContainer
	contextPath = loadProperties().contextPath
	recompileOnSourceChange = false
  	reloadOnClassChange = false
  	reloadOnConfigChange = false
  	reloadOnLibChange = false
	// debugging JVM GC - for http://gceasy.io/
	// jvmArgs = [ '-XX:+PrintGCDetails', '-XX:+PrintGCDateStamps', '-Xloggc:gc_jvm.log' ]
}