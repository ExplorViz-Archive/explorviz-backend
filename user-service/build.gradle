plugins {
	id "application"
	id "com.github.johnrengelman.shadow" version "5.1.0"
	id "com.github.spotbugs" version "1.6.10"
	id "maven"
}

// Force new Dependencies 
configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
	
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
	
	implementation project(':settings-service:settings-model')
	
	// ExplorViz Shared Dependencies
	if(useRemoteSharedProject.toBoolean()) {
		implementation "com.github.explorviz.explorviz-backend-shared:user:${sharedProjectVersion}"
    	implementation "com.github.explorviz.explorviz-backend-shared:config-injection:${sharedProjectVersion}"
		implementation "com.github.explorviz.explorviz-backend-shared:security:${sharedProjectVersion}"
		implementation "com.github.explorviz.explorviz-backend-shared:exception-handling:${sharedProjectVersion}"
		implementation "com.github.explorviz.explorviz-backend-shared:common-concerns:${sharedProjectVersion}"
		implementation "com.github.explorviz.explorviz-backend-shared:query:${sharedProjectVersion}"
  	}
  	else {
	     
  		implementation project(':user')
    	implementation project(':config-injection')
    	implementation project(':security')
    	implementation project(':exception-handling')
    	implementation project(':common-concerns')
    	implementation project(':query')
  }
  
  implementation group: 'io.swagger.core.v3', name: 'swagger-core', version: '2.0.8'
  implementation group: 'io.swagger.core.v3', name: 'swagger-jaxrs2', version: '2.0.8' 
  
}

assemble.dependsOn shadowJar
jar.enabled = false

jar {
  manifest {
    attributes(
      'Main-Class': 'net.explorviz.security.server.main.Main'
    )
  }
}


application {
    mainClassName = 'net.explorviz.security.server.main.Main'
}

shadowJar {
  baseName = "explorviz-${project.name}"
  classifier = null
}

// BEGIN Jitpack publishing
artifacts {
  archives shadowJar
}

archivesBaseName = shadowJar.baseName
// END Jitpack publishing

spotbugs {
  excludeFilter = file("../conf/spotbugs-exclude-filter.xml")
  reportLevel = "low"
  effort = "max"
  ignoreFailures = true
  toolVersion = '3.1.7'
}

// Per default XML reports for SpotBugs are generated
// Include this to generate HTML reports
tasks.withType(com.github.spotbugs.SpotBugsTask) {
  reports {
    // Either HTML or XML reports can be activated
    html.enabled true
    xml.enabled false
  }
}

task spotbugs {
  group 'Quality Assurance'
  description 'Run SpotBugs'
  
  dependsOn 'spotbugsMain'
  dependsOn 'spotbugsTest'
}

// START environment task
task updateEnvPropsInBuildDir {

	// run with:
	// .././gradlew run -Penvironment=production

	doLast {
		if (project.hasProperty("environment")) {
   			def environment = project.findProperty("environment")
   	
   			if(environment.equals("production")) {
   				println("Using the production properties file")
   				delete("${buildDir}/resources/main/explorviz.properties")
    		
    			copy { 
      				from "${buildDir}/resources/main" 
    				into "${buildDir}/resources/main"
    				rename "explorviz.production.properties", "explorviz.properties" 
    			}
    		
    			delete("${buildDir}/resources/main/explorviz.production.properties")        		
			}
		} else {
    		println("Using default properties file")
		}
	}
}

run.dependsOn updateEnvPropsInBuildDir
updateEnvPropsInBuildDir.shouldRunAfter classes
// END environment task